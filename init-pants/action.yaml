---
name: Initialize Pants
description: |
  Install Pants and its dependencies and prepare its caches.

inputs:
  # Note: inputs are always string typed.
  setup-commit:
    description: |
      Run the get-pants.sh script version at this commit in the pantsbuild/setup repo.
      Picking a specific commit is safer than downloading the current version.
    required: false
    # When we update get-pants.sh, we should update this commit.
    default: baaf73b00d1f0c0508cfbdf4987dc9caa69d85b9
  base-branch:
    description: |
      The fallback commit to restore the local process cache from, if no cache
      is available at the current commit.
    required: false
    default: main
  gha-cache-key:
    description: Qualify all cache keys with this string. Useful for invalidating everything.
    required: false
    default: v0
  named-caches-hash:
    description: |
      The hash to cache the named caches against. Should be a hash generated by hashFiles()
      on all inputs to named caches, which are typically your lockfiles.
    required: true
  pants-ci-config:
    description: |
      An extra config file to use in CI. Defaults to pants.ci.toml if present, or no
      file otherwise. Set to an empty string to disable.
    required: false
    default: DEFAULT
  cache-lmdb-store:
    description: |
      Whether to upload and restore the local process cache. If you're not using a fine-grained
      remote caching service (see https://www.pantsbuild.org/docs/remote-caching), then you may
      also want to preserve the local Pants process cache (lmdb_store). However this must
      invalidate for changes to any file that can affect the build, so may not be practical in
      larger repos. A remote cache service integrates with Pants's fine-grained invalidation and
      avoids these problems.
    required: false
    default: 'false' # a string!

runs:
  using: "composite"
  steps:
    - name: Ensure the Pants launcher binary
      shell: bash
      run: |
        if ! command -v pants; then
          curl --proto '=https' --tlsv1.2 -fsSLO \
            https://raw.githubusercontent.com/pantsbuild/setup/${{ inputs.setup-commit }}/get-pants.sh
          ./get-pants.sh
          echo "$HOME/bin" >> $GITHUB_PATH
        fi

    - name: Get the Pants bootstrap cache info
      id: pants_bootstrap_cache
      shell: bash
      run: |
        PANTS_BOOTSTRAP_CACHE_KEY=$(PANTS_BOOTSTRAP_TOOLS=2 pants bootstrap-cache-key)
        if [[ "$OSTYPE" == "darwin"* ]]; then
          PANTS_BOOTSTRAP_CACHE_DIR="~/Library/Caches/nce"
        else
          PANTS_BOOTSTRAP_CACHE_DIR="~/.cache/nce"
        fi
        echo "pants_bootstrap_cache_key=$PANTS_BOOTSTRAP_CACHE_KEY" >> $GITHUB_OUTPUT
        echo "pants_bootstrap_cache_dir=$PANTS_BOOTSTRAP_CACHE_DIR" >> $GITHUB_OUTPUT

    - name: Cache Pants setup
      id: cache-pants-setup
      uses: actions/cache@v4
      with:
        path: |
          ${{ steps.pants_bootstrap_cache.outputs.pants_bootstrap_cache_dir }}
        key: pants-setup-${{ steps.pants_bootstrap_cache.outputs.pants_bootstrap_cache_key }}

    - name: Cache Pants named caches
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pants/named_caches
        key: pants-named-caches-${{ runner.os }}-${{ inputs.gha-cache-key }}-${{ hashFiles('pants.toml') }}-${{ inputs.named-caches-hash }}
        restore-keys: |
          pants-named-caches-${{ runner.os }}-${{ inputs.gha-cache-key }}-${{ hashFiles('pants.toml') }}-
          pants-named-caches-${{ runner.os }}-${{ inputs.gha-cache-key }}-

    # Looking up the commit allows us to use the cache from the latest commit on the base branch.
    - name: Get Pants Cache Commit (base branch commit to pull cache from)
      id: pants_cache_commit
      if: ${{ inputs.cache-lmdb-store == 'true' }}
      shell: bash
      # we could use this, but only if fetch-depth goes back far enough
      # COMMIT=$(git merge-base ${GITHUB_BASE_REF:-${{ inputs.base-branch }}} HEAD | head -n1)
      run: |
        CACHECOMMIT=$(
          gh api -H "Accept: application/vnd.github+json" \
          '/repos/${{ github.repository }}/commits?per_page=1&sha=${{ inputs.base-branch }}' \
          -q '.[].sha'
        )
        echo "CACHECOMMIT=${CACHECOMMIT}" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Cache Pants LMDB store
      if: ${{ inputs.cache-lmdb-store == 'true' }}
      uses: actions/cache@v3
      id: cache-pants-lmdb-store
      with:
        path: |
          ~/.cache/pants/lmdb_store
        # The commit SHA serves as a hash of all files in the repo.
        # A remote cache service integrates with Pants's fine-grained invalidation and avoids these problems.
        key: pants-lmdb-store-${{ runner.os }}-${{ inputs.gha-cache-key }}-${{ github.sha }}
        restore-keys: |
          pants-lmdb-store-${{ runner.os }}-${{ inputs.gha-cache-key }}-${{ steps.pants_cache_commit.outputs.CACHECOMMIT }}
          pants-lmdb-store-${{ runner.os }}-${{ inputs.gha-cache-key }}-

    # Adding env vars to ${GITHUB_ENV} makes the vars show up for all subsequent steps
    # in the workflow that uses this composite action.
    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
    - name: Tell pants to use CI config
      if: ${{ inputs.pants-ci-config != '' }}
      shell: bash
      env:
        PANTS_CONFIG_FILES: ${{ inputs.pants-ci-config }}
      run: |
        if [ "${PANTS_CONFIG_FILES}" == "DEFAULT" ]; then
          if [ -f "pants.ci.toml" ]; then
            echo "PANTS_CONFIG_FILES=pants.ci.toml" >> ${GITHUB_ENV}
          else
            echo "NOT setting PANTS_CONFIG_FILES by default"
            echo "because pants.ci.toml does not exist."
          fi
        else
          echo "Setting custom PANTS_CONFIG_FILES=${PANTS_CONFIG_FILES}"
          echo "PANTS_CONFIG_FILES=${PANTS_CONFIG_FILES}" >> ${GITHUB_ENV}
        fi

    - name: Bootstrap Pants
      shell: bash
      run: |
        pants --version
